/* Auto-generated by genmsg_cpp for file /home/ubuntu/workspace/src/bosch_web_visualization/wviz_tf_manager/srv/PublishAllTransforms.srv */
#ifndef WVIZ_TF_MANAGER_SERVICE_PUBLISHALLTRANSFORMS_H
#define WVIZ_TF_MANAGER_SERVICE_PUBLISHALLTRANSFORMS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace wviz_tf_manager
{
template <class ContainerAllocator>
struct PublishAllTransformsRequest_ {
  typedef PublishAllTransformsRequest_<ContainerAllocator> Type;

  PublishAllTransformsRequest_()
  {
  }

  PublishAllTransformsRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct PublishAllTransformsRequest
typedef  ::wviz_tf_manager::PublishAllTransformsRequest_<std::allocator<void> > PublishAllTransformsRequest;

typedef boost::shared_ptr< ::wviz_tf_manager::PublishAllTransformsRequest> PublishAllTransformsRequestPtr;
typedef boost::shared_ptr< ::wviz_tf_manager::PublishAllTransformsRequest const> PublishAllTransformsRequestConstPtr;



template <class ContainerAllocator>
struct PublishAllTransformsResponse_ {
  typedef PublishAllTransformsResponse_<ContainerAllocator> Type;

  PublishAllTransformsResponse_()
  {
  }

  PublishAllTransformsResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct PublishAllTransformsResponse
typedef  ::wviz_tf_manager::PublishAllTransformsResponse_<std::allocator<void> > PublishAllTransformsResponse;

typedef boost::shared_ptr< ::wviz_tf_manager::PublishAllTransformsResponse> PublishAllTransformsResponsePtr;
typedef boost::shared_ptr< ::wviz_tf_manager::PublishAllTransformsResponse const> PublishAllTransformsResponseConstPtr;


struct PublishAllTransforms
{

typedef PublishAllTransformsRequest Request;
typedef PublishAllTransformsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PublishAllTransforms
} // namespace wviz_tf_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wviz_tf_manager/PublishAllTransformsRequest";
  }

  static const char* value(const  ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wviz_tf_manager/PublishAllTransformsResponse";
  }

  static const char* value(const  ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PublishAllTransformsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PublishAllTransformsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<wviz_tf_manager::PublishAllTransforms> {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const wviz_tf_manager::PublishAllTransforms&) { return value(); } 
};

template<>
struct DataType<wviz_tf_manager::PublishAllTransforms> {
  static const char* value() 
  {
    return "wviz_tf_manager/PublishAllTransforms";
  }

  static const char* value(const wviz_tf_manager::PublishAllTransforms&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wviz_tf_manager/PublishAllTransforms";
  }

  static const char* value(const wviz_tf_manager::PublishAllTransformsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wviz_tf_manager/PublishAllTransforms";
  }

  static const char* value(const wviz_tf_manager::PublishAllTransformsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WVIZ_TF_MANAGER_SERVICE_PUBLISHALLTRANSFORMS_H

