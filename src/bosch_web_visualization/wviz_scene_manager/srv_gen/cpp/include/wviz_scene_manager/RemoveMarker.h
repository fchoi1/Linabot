/* Auto-generated by genmsg_cpp for file /home/ubuntu/workspace/src/bosch_web_visualization/wviz_scene_manager/srv/RemoveMarker.srv */
#ifndef WVIZ_SCENE_MANAGER_SERVICE_REMOVEMARKER_H
#define WVIZ_SCENE_MANAGER_SERVICE_REMOVEMARKER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace wviz_scene_manager
{
template <class ContainerAllocator>
struct RemoveMarkerRequest_ {
  typedef RemoveMarkerRequest_<ContainerAllocator> Type;

  RemoveMarkerRequest_()
  : topic()
  {
  }

  RemoveMarkerRequest_(const ContainerAllocator& _alloc)
  : topic(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topic;


  typedef boost::shared_ptr< ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct RemoveMarkerRequest
typedef  ::wviz_scene_manager::RemoveMarkerRequest_<std::allocator<void> > RemoveMarkerRequest;

typedef boost::shared_ptr< ::wviz_scene_manager::RemoveMarkerRequest> RemoveMarkerRequestPtr;
typedef boost::shared_ptr< ::wviz_scene_manager::RemoveMarkerRequest const> RemoveMarkerRequestConstPtr;



template <class ContainerAllocator>
struct RemoveMarkerResponse_ {
  typedef RemoveMarkerResponse_<ContainerAllocator> Type;

  RemoveMarkerResponse_()
  {
  }

  RemoveMarkerResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct RemoveMarkerResponse
typedef  ::wviz_scene_manager::RemoveMarkerResponse_<std::allocator<void> > RemoveMarkerResponse;

typedef boost::shared_ptr< ::wviz_scene_manager::RemoveMarkerResponse> RemoveMarkerResponsePtr;
typedef boost::shared_ptr< ::wviz_scene_manager::RemoveMarkerResponse const> RemoveMarkerResponseConstPtr;


struct RemoveMarker
{

typedef RemoveMarkerRequest Request;
typedef RemoveMarkerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RemoveMarker
} // namespace wviz_scene_manager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8f94bae31b356b24d0427f80426d0c3";
  }

  static const char* value(const  ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd8f94bae31b356b2ULL;
  static const uint64_t static_value2 = 0x4d0427f80426d0c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wviz_scene_manager/RemoveMarkerRequest";
  }

  static const char* value(const  ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string topic\n\
\n\
";
  }

  static const char* value(const  ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wviz_scene_manager/RemoveMarkerResponse";
  }

  static const char* value(const  ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topic);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct RemoveMarkerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct RemoveMarkerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<wviz_scene_manager::RemoveMarker> {
  static const char* value() 
  {
    return "d8f94bae31b356b24d0427f80426d0c3";
  }

  static const char* value(const wviz_scene_manager::RemoveMarker&) { return value(); } 
};

template<>
struct DataType<wviz_scene_manager::RemoveMarker> {
  static const char* value() 
  {
    return "wviz_scene_manager/RemoveMarker";
  }

  static const char* value(const wviz_scene_manager::RemoveMarker&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8f94bae31b356b24d0427f80426d0c3";
  }

  static const char* value(const wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wviz_scene_manager/RemoveMarker";
  }

  static const char* value(const wviz_scene_manager::RemoveMarkerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8f94bae31b356b24d0427f80426d0c3";
  }

  static const char* value(const wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wviz_scene_manager/RemoveMarker";
  }

  static const char* value(const wviz_scene_manager::RemoveMarkerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // WVIZ_SCENE_MANAGER_SERVICE_REMOVEMARKER_H

