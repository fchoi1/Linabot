/* Auto-generated by genmsg_cpp for file /home/ubuntu/workspace/src/bosch_web_visualization/tf_lister/srv/TfLister.srv */
#ifndef TF_LISTER_SERVICE_TFLISTER_H
#define TF_LISTER_SERVICE_TFLISTER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace tf_lister
{
template <class ContainerAllocator>
struct TfListerRequest_ {
  typedef TfListerRequest_<ContainerAllocator> Type;

  TfListerRequest_()
  {
  }

  TfListerRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::tf_lister::TfListerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf_lister::TfListerRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct TfListerRequest
typedef  ::tf_lister::TfListerRequest_<std::allocator<void> > TfListerRequest;

typedef boost::shared_ptr< ::tf_lister::TfListerRequest> TfListerRequestPtr;
typedef boost::shared_ptr< ::tf_lister::TfListerRequest const> TfListerRequestConstPtr;



template <class ContainerAllocator>
struct TfListerResponse_ {
  typedef TfListerResponse_<ContainerAllocator> Type;

  TfListerResponse_()
  : tf_list()
  {
  }

  TfListerResponse_(const ContainerAllocator& _alloc)
  : tf_list(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _tf_list_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  tf_list;


  typedef boost::shared_ptr< ::tf_lister::TfListerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf_lister::TfListerResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct TfListerResponse
typedef  ::tf_lister::TfListerResponse_<std::allocator<void> > TfListerResponse;

typedef boost::shared_ptr< ::tf_lister::TfListerResponse> TfListerResponsePtr;
typedef boost::shared_ptr< ::tf_lister::TfListerResponse const> TfListerResponseConstPtr;


struct TfLister
{

typedef TfListerRequest Request;
typedef TfListerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct TfLister
} // namespace tf_lister

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tf_lister::TfListerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tf_lister::TfListerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tf_lister::TfListerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::tf_lister::TfListerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::tf_lister::TfListerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf_lister/TfListerRequest";
  }

  static const char* value(const  ::tf_lister::TfListerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tf_lister::TfListerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::tf_lister::TfListerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tf_lister::TfListerRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tf_lister::TfListerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tf_lister::TfListerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tf_lister::TfListerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "71ff2010a39035e42d29fb248b2dd8fd";
  }

  static const char* value(const  ::tf_lister::TfListerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x71ff2010a39035e4ULL;
  static const uint64_t static_value2 = 0x2d29fb248b2dd8fdULL;
};

template<class ContainerAllocator>
struct DataType< ::tf_lister::TfListerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf_lister/TfListerResponse";
  }

  static const char* value(const  ::tf_lister::TfListerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tf_lister::TfListerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] tf_list\n\
\n\
";
  }

  static const char* value(const  ::tf_lister::TfListerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tf_lister::TfListerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct TfListerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tf_lister::TfListerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tf_list);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct TfListerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tf_lister::TfLister> {
  static const char* value() 
  {
    return "71ff2010a39035e42d29fb248b2dd8fd";
  }

  static const char* value(const tf_lister::TfLister&) { return value(); } 
};

template<>
struct DataType<tf_lister::TfLister> {
  static const char* value() 
  {
    return "tf_lister/TfLister";
  }

  static const char* value(const tf_lister::TfLister&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tf_lister::TfListerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "71ff2010a39035e42d29fb248b2dd8fd";
  }

  static const char* value(const tf_lister::TfListerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tf_lister::TfListerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf_lister/TfLister";
  }

  static const char* value(const tf_lister::TfListerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tf_lister::TfListerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "71ff2010a39035e42d29fb248b2dd8fd";
  }

  static const char* value(const tf_lister::TfListerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tf_lister::TfListerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf_lister/TfLister";
  }

  static const char* value(const tf_lister::TfListerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TF_LISTER_SERVICE_TFLISTER_H

