/*********************************************************************
 *
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2010, Robert Bosch LLC.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Robert Bosch nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *
 *********************************************************************/
/**
 * @class ConeModel
 * @brief Class for the model of an cone.
 * @details (generally used when visualizing coordinate frames or markers).
 */
ros.visualization.ConeModel = ros.visualization.Model.extend({
    init: function(gl, shader_manager) 
    {
	this._super(gl, shader_manager);
	this.prog = shader_manager.shaderPrograms[shader_manager.ShaderTypes.FLAT];
	this.renderer = new SglMeshGLRenderer(this.prog);
	this.scale = [3.0, 3.0, 1.0];
	this.name ="Cone Model";

	var cone_vertices = [
	    0.46194,-0.508757,0.191362,
	    0.353553,-0.5087,0.353574,
	    0.353553,-0.508947,-0.353533,
	    0.46194,-0.508757,0.191362,
	    0.353553,-0.508947,-0.353533,
	    0.46194,-0.50889,-0.191321,
	    0.46194,-0.508757,0.191362,
	    0.46194,-0.50889,-0.191321,
	    0.5,-0.508824,2.05333e-05,
	    0.353553,-0.5087,0.353574,
	    0.191342,-0.508662,0.46196,
	    0.191342,-0.508985,-0.461919,
	    0.353553,-0.5087,0.353574,
	    0.191342,-0.508985,-0.461919,
	    0.353553,-0.508947,-0.353533,
	    0.191342,-0.508662,0.46196,
	    7.63302e-17,-0.508649,0.500021,
		-4.61304e-17,-0.508998,-0.499979,
	    0.191342,-0.508662,0.46196,
		-4.61304e-17,-0.508998,-0.499979,
	    0.191342,-0.508985,-0.461919,
	    7.63302e-17,-0.508649,0.500021,
		-0.191342,-0.508662,0.46196,
		-0.191342,-0.508985,-0.461919,
	    7.63302e-17,-0.508649,0.500021,
		-0.191342,-0.508985,-0.461919,
		-4.61304e-17,-0.508998,-0.499979,
		-0.191342,-0.508662,0.46196,
		-0.353553,-0.5087,0.353574,
		-0.353553,-0.508947,-0.353533,
		-0.191342,-0.508662,0.46196,
		-0.353553,-0.508947,-0.353533,
		-0.191342,-0.508985,-0.461919,
		-0.353553,-0.5087,0.353574,
		-0.46194,-0.508757,0.191362,
		-0.46194,-0.50889,-0.191321,
		-0.353553,-0.5087,0.353574,
		-0.46194,-0.50889,-0.191321,
		-0.353553,-0.508947,-0.353533,
		-0.46194,-0.508757,0.191362,
		-0.5,-0.508824,2.05333e-05,
		-0.46194,-0.50889,-0.191321,
	    0.5,-0.508824,2.05333e-05,
	    4.57151e-17,0.491176,-0.000328533,
	    0.46194,-0.508757,0.191362,
	    0.46194,-0.508757,0.191362,
	    4.57151e-17,0.491176,-0.000328533,
	    0.353553,-0.5087,0.353574,
	    0.353553,-0.5087,0.353574,
	    4.57151e-17,0.491176,-0.000328533,
	    0.191342,-0.508662,0.46196,
	    0.191342,-0.508662,0.46196,
	    4.57151e-17,0.491176,-0.000328533,
	    7.63302e-17,-0.508649,0.500021,
	    7.63302e-17,-0.508649,0.500021,
	    4.57151e-17,0.491176,-0.000328533,
		-0.191342,-0.508662,0.46196,
		-0.191342,-0.508662,0.46196,
	    4.57151e-17,0.491176,-0.000328533,
		-0.353553,-0.5087,0.353574,
		-0.353553,-0.5087,0.353574,
	    4.57151e-17,0.491176,-0.000328533,
		-0.46194,-0.508757,0.191362,
		-0.46194,-0.508757,0.191362,
	    4.57151e-17,0.491176,-0.000328533,
		-0.5,-0.508824,2.05333e-05,
		-0.5,-0.508824,2.05333e-05,
	    4.57151e-17,0.491176,-0.000328533,
		-0.46194,-0.50889,-0.191321,
		-0.46194,-0.50889,-0.191321,
	    4.57151e-17,0.491176,-0.000328533,
		-0.353553,-0.508947,-0.353533,
		-0.353553,-0.508947,-0.353533,
	    4.57151e-17,0.491176,-0.000328533,
		-0.191342,-0.508985,-0.461919,
		-0.191342,-0.508985,-0.461919,
	    4.57151e-17,0.491176,-0.000328533,
		-4.61304e-17,-0.508998,-0.499979,
		-4.61304e-17,-0.508998,-0.499979,
	    4.57151e-17,0.491176,-0.000328533,
	    0.191342,-0.508985,-0.461919,
	    0.191342,-0.508985,-0.461919,
	    4.57151e-17,0.491176,-0.000328533,
	    0.353553,-0.508947,-0.353533,
	    0.353553,-0.508947,-0.353533,
	    4.57151e-17,0.491176,-0.000328533,
	    0.46194,-0.50889,-0.191321,
	    0.46194,-0.50889,-0.191321,
	    4.57151e-17,0.491176,-0.000328533,
	    0.5,-0.508824,2.05333e-05
	];

	var cone_normals = [
		-2.559e-08,-1,0.00034906,
		-2.559e-08,-1,0.00034906,
		-2.559e-08,-1,0.00034906,
	    4.72842e-08,-1,0.000349046,
	    4.72842e-08,-1,0.000349046,
	    4.72842e-08,-1,0.000349046,
	    7.83035e-07,-1,0.000349046,
	    7.83035e-07,-1,0.000349046,
	    7.83035e-07,-1,0.000349046,
		-1.16563e-07,-1,0.000349029,
		-1.16563e-07,-1,0.000349029,
		-1.16563e-07,-1,0.000349029,
		-2.71476e-07,-1,0.00034906,
		-2.71476e-07,-1,0.00034906,
		-2.71476e-07,-1,0.00034906,
		-3.71784e-08,-1,0.000349045,
		-3.71784e-08,-1,0.000349045,
		-3.71784e-08,-1,0.000349045,
	    4.02417e-08,-1,0.000349029,
	    4.02417e-08,-1,0.000349029,
	    4.02417e-08,-1,0.000349029,
	    4.02417e-08,-1,0.000349029,
	    4.02417e-08,-1,0.000349029,
	    4.02417e-08,-1,0.000349029,
		-3.71784e-08,-1,0.000349045,
		-3.71784e-08,-1,0.000349045,
		-3.71784e-08,-1,0.000349045,
	    9.59741e-08,-1,0.00034906,
	    9.59741e-08,-1,0.00034906,
	    9.59741e-08,-1,0.00034906,
	    2.50886e-07,-1,0.000349029,
	    2.50886e-07,-1,0.000349029,
	    2.50886e-07,-1,0.000349029,
	    4.72842e-08,-1,0.000349046,
	    4.72842e-08,-1,0.000349046,
	    4.72842e-08,-1,0.000349046,
		-2.559e-08,-1,0.00034906,
		-2.559e-08,-1,0.00034906,
		-2.559e-08,-1,0.00034906,
		-7.83035e-07,-1,0.000349046,
		-7.83035e-07,-1,0.000349046,
		-7.83035e-07,-1,0.000349046,
	    0.880599,0.440361,0.175008,
	    0.880599,0.440361,0.175008,
	    0.880599,0.440361,0.175008,
	    0.746536,0.440474,0.498666,
	    0.746536,0.440474,0.498666,
	    0.746536,0.440474,0.498666,
	    0.498819,0.44056,0.746382,
	    0.498819,0.44056,0.746382,
	    0.498819,0.44056,0.746382,
	    0.175162,0.440607,0.880445,
	    0.175162,0.440607,0.880445,
	    0.175162,0.440607,0.880445,
		-0.175162,0.440607,0.880445,
		-0.175162,0.440607,0.880445,
		-0.175162,0.440607,0.880445,
		-0.498819,0.44056,0.746382,
		-0.498819,0.44056,0.746382,
		-0.498819,0.44056,0.746382,
		-0.746536,0.440474,0.498666,
		-0.746536,0.440474,0.498666,
		-0.746536,0.440474,0.498666,
		-0.880599,0.440361,0.175008,
		-0.880599,0.440361,0.175008,
		-0.880599,0.440361,0.175008,
		-0.880599,0.440238,-0.175316,
		-0.880599,0.440238,-0.175316,
		-0.880599,0.440238,-0.175316,
		-0.746536,0.440125,-0.498973,
		-0.746536,0.440125,-0.498973,
		-0.746536,0.440125,-0.498973,
		-0.498819,0.440039,-0.746689,
		-0.498819,0.440039,-0.746689,
		-0.498819,0.440039,-0.746689,
		-0.175162,0.439992,-0.880753,
		-0.175162,0.439992,-0.880753,
		-0.175162,0.439992,-0.880753,
	    0.175162,0.439992,-0.880753,
	    0.175162,0.439992,-0.880753,
	    0.175162,0.439992,-0.880753,
	    0.498819,0.440039,-0.746689,
	    0.498819,0.440039,-0.746689,
	    0.498819,0.440039,-0.746689,
	    0.746536,0.440125,-0.498973,
	    0.746536,0.440125,-0.498973,
	    0.746536,0.440125,-0.498973,
	    0.880599,0.440238,-0.175316,
	    0.880599,0.440238,-0.175316,
	    0.880599,0.440238,-0.175316
	];
	
	var cone_indices =
	    [	0,1,2,
		3,4,5,
		6,7,8,
		9,10,11,
		12,13,14,
		15,16,17,
		18,19,20,
		21,22,23,
		24,25,26,
		27,28,29,
		30,31,32,
		33,34,35,
		36,37,38,
		39,40,41,
		42,43,44,
		45,46,47,
		48,49,50,
		51,52,53,
		54,55,56,
		57,58,59,
		60,61,62,
		63,64,65,
		66,67,68,
		69,70,71,
		72,73,74,
		75,76,77,
		78,79,80,
		81,82,83,
		84,85,86,
		87,88,89
	    ];
	
	this.vertices = cone_vertices;
	this.indices  = cone_indices;
	this.normals = cone_normals;
    },
    
    load: function (callback, scene_viewer)
    {  

  	this.meshCone = new SglMeshGL(this.gl);
  	this.meshCone.addVertexAttribute("position", 3, new Float32Array(this.vertices));
  	this.meshCone.addVertexAttribute("normal",   3, new Float32Array(this.normals));
  	this.meshCone.addArrayPrimitives("vertices", 	  this.gl.POINTS, 0, this.indices.length);
  	this.meshCone.addIndexedPrimitives("triangles", this.gl.TRIANGLES, new Uint16Array(this.indices));
	
	this.updateBoundingBox(this.vertices);
  	
	var async = (callback) ? (true) : (false);
	if (async) {
	    callback(this);
	}
    },

    draw: function (gl, xform)
    {
	var color = [this.color[0] * this.highlightPass, this.color[1] * this.highlightPass , this.color[2] * this.highlightPass];

	var uniforms = { u_mvp : xform.modelViewProjectionMatrix , u_view_normal_mat : xform.viewSpaceNormalMatrix, u_color : color};
	sglRenderMeshGLPrimitives(this.meshCone, "triangles", this.prog, null, uniforms);  
    },
});